#include <QtGlobal>
// Automatically generated by extract_strings.py
static const char *BitShekel_strings[] = {QT_TRANSLATE_NOOP("BitShekel-core", "BitShekel version"),
QT_TRANSLATE_NOOP("BitShekel-core", "Usage:"),
QT_TRANSLATE_NOOP("BitShekel-core", "Send command to -server or BitShekeld"),
QT_TRANSLATE_NOOP("BitShekel-core", "List commands"),
QT_TRANSLATE_NOOP("BitShekel-core", "Get help for a command"),
QT_TRANSLATE_NOOP("BitShekel-core", "Options:"),
QT_TRANSLATE_NOOP("BitShekel-core", "Specify configuration file (default: BitShekel.conf)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Specify pid file (default: BitShekel.pid)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Generate coins"),
QT_TRANSLATE_NOOP("BitShekel-core", "Don't generate coins"),
QT_TRANSLATE_NOOP("BitShekel-core", "Start minimized"),
QT_TRANSLATE_NOOP("BitShekel-core", "Specify data directory"),
QT_TRANSLATE_NOOP("BitShekel-core", "Specify connection timeout (in milliseconds)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Connect through socks4 proxy"),
QT_TRANSLATE_NOOP("BitShekel-core", "Allow DNS lookups for addnode and connect"),
QT_TRANSLATE_NOOP("BitShekel-core", "Listen for connections on <port> (default: 9332 or testnet: 19333)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Maintain at most <n> connections to peers (default: 125)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Add a node to connect to"),
QT_TRANSLATE_NOOP("BitShekel-core", "Connect only to the specified node"),
QT_TRANSLATE_NOOP("BitShekel-core", "Don't accept connections from outside"),
QT_TRANSLATE_NOOP("BitShekel-core", "Don't bootstrap list of peers using DNS"),
QT_TRANSLATE_NOOP("BitShekel-core", "Threshold for disconnecting misbehaving peers (default: 100)"),
QT_TRANSLATE_NOOP("BitShekel-core", ""
"Number of seconds to keep misbehaving peers from reconnecting (default: "
"86400)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Maximum per-connection receive buffer, <n>*1000 bytes (default: 10000)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Maximum per-connection send buffer, <n>*1000 bytes (default: 10000)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Don't attempt to use UPnP to map the listening port"),
QT_TRANSLATE_NOOP("BitShekel-core", "Attempt to use UPnP to map the listening port"),
QT_TRANSLATE_NOOP("BitShekel-core", "Fee per kB to add to transactions you send"),
QT_TRANSLATE_NOOP("BitShekel-core", "Accept command line and JSON-RPC commands"),
QT_TRANSLATE_NOOP("BitShekel-core", "Run in the background as a daemon and accept commands"),
QT_TRANSLATE_NOOP("BitShekel-core", "Use the test network"),
QT_TRANSLATE_NOOP("BitShekel-core", "Output extra debugging information"),
QT_TRANSLATE_NOOP("BitShekel-core", "Prepend debug output with timestamp"),
QT_TRANSLATE_NOOP("BitShekel-core", "Send trace/debug info to console instead of debug.log file"),
QT_TRANSLATE_NOOP("BitShekel-core", "Send trace/debug info to debugger"),
QT_TRANSLATE_NOOP("BitShekel-core", "Username for JSON-RPC connections"),
QT_TRANSLATE_NOOP("BitShekel-core", "Password for JSON-RPC connections"),
QT_TRANSLATE_NOOP("BitShekel-core", "Listen for JSON-RPC connections on <port> (default: 9332)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Allow JSON-RPC connections from specified IP address"),
QT_TRANSLATE_NOOP("BitShekel-core", "Send commands to node running on <ip> (default: 127.0.0.1)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Set key pool size to <n> (default: 100)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Rescan the block chain for missing wallet transactions"),
QT_TRANSLATE_NOOP("BitShekel-core", ""
"\n"
"SSL options: (see the Bitshekel Wiki for SSL setup instructions)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Use OpenSSL (https) for JSON-RPC connections"),
QT_TRANSLATE_NOOP("BitShekel-core", "Server certificate file (default: server.cert)"),
QT_TRANSLATE_NOOP("BitShekel-core", "Server private key (default: server.pem)"),
QT_TRANSLATE_NOOP("BitShekel-core", ""
"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:"
"@STRENGTH)"),
QT_TRANSLATE_NOOP("BitShekel-core", "This help message"),
QT_TRANSLATE_NOOP("BitShekel-core", ""
"Cannot obtain a lock on data directory %s.  BitShekel is probably already "
"running."),
QT_TRANSLATE_NOOP("BitShekel-core", "Loading addresses..."),
QT_TRANSLATE_NOOP("BitShekel-core", "Error loading addr.dat"),
QT_TRANSLATE_NOOP("BitShekel-core", "Loading block index..."),
QT_TRANSLATE_NOOP("BitShekel-core", "Error loading blkindex.dat"),
QT_TRANSLATE_NOOP("BitShekel-core", "Loading wallet..."),
QT_TRANSLATE_NOOP("BitShekel-core", "Error loading wallet.dat: Wallet corrupted"),
QT_TRANSLATE_NOOP("BitShekel-core", "Error loading wallet.dat: Wallet requires newer version of BitShekel"),
QT_TRANSLATE_NOOP("BitShekel-core", "Wallet needed to be rewritten: restart BitShekel to complete"),
QT_TRANSLATE_NOOP("BitShekel-core", "Error loading wallet.dat"),
QT_TRANSLATE_NOOP("BitShekel-core", "Rescanning..."),
QT_TRANSLATE_NOOP("BitShekel-core", "Done loading"),
QT_TRANSLATE_NOOP("BitShekel-core", "Invalid -proxy address"),
QT_TRANSLATE_NOOP("BitShekel-core", "Invalid amount for -paytxfee=<amount>"),
QT_TRANSLATE_NOOP("BitShekel-core", ""
"Warning: -paytxfee is set very high.  This is the transaction fee you will "
"pay if you send a transaction."),
QT_TRANSLATE_NOOP("BitShekel-core", "Error: CreateThread(StartNode) failed"),
QT_TRANSLATE_NOOP("BitShekel-core", "Warning: Disk space is low  "),
QT_TRANSLATE_NOOP("BitShekel-core", ""
"Unable to bind to port %d on this computer.  BitShekel is probably already "
"running."),
QT_TRANSLATE_NOOP("BitShekel-core", ""
"Warning: Please check that your computer's date and time are correct.  If "
"your clock is wrong BitShekel will not work properly."),
QT_TRANSLATE_NOOP("BitShekel-core", "beta"),
};
